#!/bin/bash

configuration_filename="${file_prefix}main.conf"
  
# -----------------------------------------------------------------------------
__menu()
{
  [[ ! $menu_titles ]] && menu_titles=()
  local menu_options
  local menu_prompt='Enter a number'
  local title='Menu '$((${#menu_titles[@]}+1))

  read -d '' help <<-EOF
NAME
    ${0##*/} - Select menu

SYNOPSIS
    ${0##*/} [-t|--title string] [-o|--option [string]]... [-p|--prompt string]
    ${0##*/} [-h|--help]

DESCRIPTION
    Return $REPLY (the number) and $VALUE (the option text).

OPTIONS
    -t, --title
        Menu title.
    -o, --option
        The list of menu options.
    -p, --prompt
        A optionnal prompt text.
    -h, --help
        Display this help screen.
EOF
  
  local local ARGS=$(getopt -o "t:o:p:h" -l "title:,options:prompt:,help" -n "$0" -- "$@")
  eval set -- "$ARGS";
  #eval set -- "$(getopt -o 't:o:p:h' -l 'title:,options:prompt:,help' -n $0 -- $@)"
  while true; do
    case "$1" in
      -t|--title) shift; title=${1:-"$title"}; shift;;
      -o|--options) shift; menu_options+=("$1"); shift;;
      -p|--prompt) shift; menu_prompt="${1:-$menu_prompt}"; shift;;
      -h|--help) shift; printf "${IFS}$help${IFS}${IFS}"; break;;
      --) shift; break;;
    esac
  done
  
  echo ""
  menu_titles+=("$title")
  #printf "%s > " "${menu_titles[@]}" | cut -d ">" -f 1-${#menu_titles[@]}
  local sep=' > '
  local breadcrumbs=$(printf "${sep}%s" "${menu_titles[@]}")
  echo ${breadcrumbs:${#sep}}

  PS3="$menu_prompt [1-$((${#menu_options[@]}+2))]:"
  select VALUE in "${menu_options[@]}" '< BACK >' '< EXIT >'; do
    case $REPLY in
    ( $([[ $REPLY -ge 1 && $REPLY -le ${#menu_options[@]} ]] && echo $REPLY) ) break;;
  ( $(( ${#menu_options[@]}+1 )) ) unset menu_titles[${#menu_titles[@]}-1]; break 2;;
( $(( ${#menu_options[@]}+2)) ) exit 65;;
( * ) echo "Invalid answer. Try another one."; continue;;
esac
  done
  
}
# ------------------------------------------------------------------------------
____edit_configuration()
{
  while true;  do
    menu /
    -t 'Edit configuration'
    -o 'Network interfaces' \
    -o 'Hosts' \
    -o 'Hostname' \
    -o 'Portfix' \
    -o 'MySQL' \
    -o 'Apache available modules' \
    -o 'Mime types' \
    -o 'Aliases' \
    -o 'Pure-FTPd' \
    -o 'Pure-FTPd TLS' \
    -o 'Mount table' \
    -o 'AW stats' \
    -o 'Failban jail' \
    -o 'Fail2ban Pure-FTPd custom filter' \
    -o 'Fail2ban dovecote custom filter' \
    -o 'Squirrelmail' \
    -o 'Postfix' \
    -o 'Cron task'

    case $REPLY in
      1 ) editor '/etc/network/interfaces'; /etc/init.d/networking reload;;
      2 ) editor '/etc/hosts';;
      3 ) editor '/etc/hostname'; /etc/init.d/hostname.sh reload;;
      4 ) editor '/etc/postfix/master.cf'; /etc/init.d/postfix reload;;
      5 ) editor '/etc/mysql/my.cnf'; /etc/init.d/mysql reload;;
      6 ) editor '/etc/apache2/mods-available/suphp.conf'; /etc/init.d/apache2 reload;;
      7 ) editor '/etc/mime.types';;
      8 ) editor '/etc/aliases';;
      9 ) editor '/etc/default/pure-ftpd-common'; /etc/init.d/pure-ftpd-mysql reload;;
      10 ) editor '/etc/pure-ftpd/conf/TLS'; /etc/init.d/pure-ftpd-mysql reload;;
      11 ) editor '/etc/fstab'; mount -o remount /; mount -a;;
      12 ) editor '/etc/cron.d/awstats'; a2ensite awstats;;
      13 ) editor '/etc/fail2ban/jail.local'; /etc/init.d/fail2ban reload;;
      14 ) editor '/etc/fail2ban/filter.d/pureftpd.conf'; /etc/init.d/fail2ban reload;;
      15 ) editor '/etc/fail2ban/filter.d/dovecot-pop3imap.conf'; /etc/init.d/fail2ban reload;;
      16 ) editor '/etc/apache2/conf.d/squirrelmail.conf'; /etc/init.d/apache2 reload;;
      17 ) editor '/etc/postfix/main.cf'; /etc/init.d/postfix reload;;
      17 ) crontab -e;;
      #/etc/init.d/mailman
      #/etc/init.d/amavis
    esac
    
    [[ $REPLY -ge 1 && $REPLY -le ${#options[@]} ]] && [ -e "$VALUE" ] && editor "$VALUE"
 
  done

}
# ------------------------------------------------------------------------------
__escape_string()
{

  local type="ere"
  local s="/" #separator
  local q="'" #quote

    read -d '' help <<-EOF
NAME
    ${0##*/} - Escape special characters

SYNOPSIS
    ${0##*/} [-s|--sed|-g|--grep|-p|--perl|-b|--bre|-e|--ere]
    ${0##*/} [-h|--help]
EOF
  
  local local ARGS=$(getopt -o "sgpbeh" -l "sed,grep,perl,bre,ere,help" -n "$0" -- "$@")
  eval set -- "$ARGS";
  while true; do
    case $1 in
      -s|--sed) shift; type='sed';;
      -g|--grep) shift; type='grep';;
      -p|--perl) shift; type='perl';;
      -b|--bre) shift; type='perl';;
      -e|--ere) shift; type='perl';;
      -h|--help) shift; printf "${IFS}$help${IFS}${IFS}"; break;;
      --) shift; break;;
    esac
  done

  [ -z "$*" ] && echo "$help" && exit 65;

  local bre_char='\^\.\*\[\$\\'
  local ere_char=$bre_char'\(\)\|\+\?\{'  
  local escaped_characters
  
  case $type in
  'sed' ) escaped_characters=$bre_char'\\'$q'\\'$s;;
  'grep' ) escaped_characters=$bre_char'\\'$q;;
  'perl' ) escaped_characters=$ere_char'\\'$q'\\'$s;;
  'bre' ) escaped_characters=$bre_char'\\'$q;;
  * ) escaped_characters=$ere_char'\\'$q;;
  esac
  
  for value in "$@"; do
    echo "$value" | sed -e 's'$s'['"$escaped_characters"'&]'$s'\\&'$s'g'
  done

}
# ------------------------------------------------------------------------------
__ask()
{
  local type='text'
  local file="$configuration_filename"
  
  local local ARGS=$(getopt -o "+k:v:o:p:q:f:sh" -l "+key:value:,option:,prompt:;quote:,file:,multiline,password,select,text,save,help" -n "$0" -- "$@")
  eval set -- "$ARGS";
  while true; do
    case "$1" in
      -k|--key) shift; local key="$1"; local prompt=${prompt:-"$1"}; shift;;
      -v|--value) shift; local value="$1"; shift;;
      -o|--option) shift; type='select'; local options="$options -o $1"; shift;;
      -p|--prompt) shift; local prompt="$1"; shift;;
      -q|--quote) shift; local quote=$1; shift;;
      -f|--file) shift; local file="${1:-$file}"; shift;;
      --multiline) shift; local type='multiline';;
      --password) shift; local type='password';;
      --select) shift; local type='select';;
      --text) shift; local type='text';;
      -s|--save) shift; local save=1;;
      -h|--help) shift; printf "${IFS}$help${IFS}${IFS}"; break;;
      --) shift; break;;
    esac
  done

  # Ask user answer
  # Save the new value to the configuration file if not empty
  # Or save default value
  case $type in  
    'multiline' )
      read -p "$prompt :" VALUE
      [ -n "$save" -a -n "$VALUE" ] && __save_variable -k "$key" -v "$VALUE" -q $quote -f "$file" --multiline
      [ -n "$save" -a -z "$VALUE" ] && __save_variable -k "$key" -v "$value" -q $quote -f "$file" --multiline
      ;;
    'password' )
      read -s -p "$prompt :" VALUE
      [ -n "$save" -a -n "$VALUE" ] && __save_variable -k "$key" -v "$VALUE" -q $quote -f "$file"
      [ -n "$save" -a -z "$VALUE" ] && __save_variable -k "$key" -v "$value" -q $quote -f "$file"
      ;;
    'select' )
      __menu -t "$prompt" $options
      [ -n "$save" -a -n "$VALUE" ] && __save_variable -k "$key" -v "$VALUE" -q $quote -f "$file"
      [ -n "$save" -a -z "$VALUE" ] && __save_variable -k "$key" -v "$value" -q $quote -f "$file"
      ;;
    * )
      read -p "$prompt [$value]:" VALUE      
      [ -n "$save" -a -n "$VALUE" ] && __save_variable -k "$key" -v "$VALUE" -q $quote -f "$file"
      [ -n "$save" -a -z "$VALUE" ] && __save_variable -k "$key" -v "$value" -q $quote -f "$file"
      ;;  
  esac
  # Immediately activate the new value
  [ -n "$VALUE" ] && eval "${key}=${VALUE}"
}
# ------------------------------------------------------------------------------
__save_variable()
{
  
    read -d '' help <<-EOF
NAME
    ${0##*/} - Replace a variable value in a file

SYNOPSIS
    ${0##*/} [-k|--key string] [-v|--value string] [-f|--file filename] [--m|--multiline] [-q|--quote] [-e|--enable] [-q|--disable]
    ${0##*/} [-h|--help]

DESCRIPTION
    Return $REPLY (the number) and $VALUE (the option text).

OPTIONS
    -k, --key
        Variable name.
    -v, --value
        Variable value to replace.
    -f, --file
        File to write.
    -f, --file
        File to write.
    -m, --multiline
        Replace a mutiline variable definition with read -d '' varname <<-EOF.
    -q, --quote
        Quote to use with value.
    -e, --enable
        Remove comment character before variable definition if present.
    -d, --disable
        Add a comment character before variable definition.
    -h, --help
        Display this help screen.
EOF

  local local ARGS=$(getopt -o "+k:v:f:q:medh" -l "+key:value:,file:,quote:,multiline,enable,disable,help" -n "$0" -- "$@")
  eval set -- "$ARGS";
  while true; do
    case "$1" in
      -k|--key) shift; local key=$1; shift;;
      -v|--value) shift; local value=$1; shift;;
      -f|--file) shift; local file=$1; shift;;
      -q|--quote) shift; local quote=$1; shift;;
      -m|--multiline) shift; local multiline=1;;
      -e|--enable) shift; local enable=1;;
      -d|--disable) shift; local disable=1;;
      -h|--help) shift; printf "${IFS}$help${IFS}${IFS}"; break;;
      --) shift; break;;
    esac
  done
  
  [ -z "$key" ] && echo $help && exit 65
  [ -z "$value" ] && echo $help && exit 65
  [ -z "$file" ] && echo $help && exit 65
  
  local s="/" #sed delimiters
  local q="'" #sed quotes

  [ ! -e "$file" ] && echo -e "#!/bin/bash${IFS}" > "$file"
  
  if [[ $multiline ]]; then
    test=$(grep -P 'read +-d +(""|'"''"') +'"$key"' *<<-?EOF' "$file")
    [ -z "$test" ] && echo -e 'read -d "" '"$key"' <<-EOF${IFS}EOF' >> "$file"

    sed -i -r '/read +-d +(""|'"''"') +'"$key"' *<<-?EOF/,/^EOF/{//!d}' "$file"
    while read line; do
      escaped_value=$(__escape_string --sed "$line")  
      sed -i -r -e '/read +-d +(""|'"''"') +'"$key"' *<<-?EOF/{:a;n;/^EOF/!ba;i'"$escaped_value" -e '}' "$file"
    done < <(echo -e $value)
  else
    test=$(grep -P '(^|;)([ \t]*)'"$key"'\s*=' "$file")
    [ -z "$test" ] && echo -e "$key"'=${IFS}' >> "$file"

    escaped_value=$(__escape_string --sed "$quote$value$quote")
    sed -r -i 's'$s'(^|;)([ \t]*)'"$key"'\s*=.*$'$s'\1\2'"$key"'='"$escaped_value"''$s "$file"
  fi
  
}
# ------------------------------------------------------------------------------
__get_config_value()
{
  
  local local ARGS=$(getopt -o "+k:f:q:h" -l "+key:,file:,quote:,help" -n "$0" -- "$@")
  eval set -- "$ARGS";
  while true; do
    case "$1" in
      -k|--key) shift; key=$1; shift;;
      -f|--file) shift; file=$1; shift;;
      -q|--quote) shift; quote=$1; shift;;
      -h|--help) shift; printf "${IFS}$help${IFS}${IFS}"; break;;
      --) shift; break;;
    esac
  done
  
  local var=$(grep -E -m 1 "(^|[;\t ]+)$key\s*=\s*" "$file")
  
  [ "$quote" == "'" ] && var="${var#*\'}" && var="${var%\'*}"
    [ "$quote" == '"' ] && var="${var#*\"}" && var="${var%\"*}"
    [[ ! $quote ]] && var=$(echo $var | sed -r "s|^.*$key\s*=\s*(\S*).*$|\1|")
    echo $var
  }
  # ------------------------------------------------------------------------------

  
read -d '' help <<-EOF
NAME
    ${0##*/} - ${script_short_description:-Bash helpers} by CLICK PANIC

SYNOPSIS
    ${0##*/} [-m|--menu] [-h|--help]
    ${0##*/} function [arg]... [-h|--help]

DESCRIPTION
    With this script you will no longer need to remember lots of commands.
    Run it with a select menu for live operations or from a script by calling one of the included functions.

    Available functions:
$(declare -F | cut -d" " -f3 | grep -v '^_.*$' | sort | sed -r 's/^(.*)/        - \1/g')

OPTIONS
    -m, --menu
        Run helper menu.
    -h, --help
        Display this help screen.

AUTHOR
    Written by Christophe BOISIER.

REPORTING BUGS
    Report bugs or Skype me to christophe.boisier@live.fr

COPYRIGHT
    Copyright (c) 2013 Christophe BOISIER License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
EOF
  
  #set -e
  #set -u

  file_prefix=${file_prefix:-$($(basename "$0")'clickpanic_')}
  #script_basename=$(basename "$0")
  #package_fullname="${script_basename%.*}"
  #package=${package_fullname##${file_prefix}}
  package_ext=${0#"$file_prefix"}
  package=${package_ext%.*}
  #echo "packname:$package"
  
  #current_dir=$(dirname "$0")
  #include_dir=$(dirname "$0")"/${file_prefix}"
  #conf_dir="${current_dir}conf/"
  
  # Overwrite default configuration if a custom config exists  
  [ -e "$configuration_filename" ] && source "$configuration_filename"

  #. "${file_prefix}global.sh"
  #. "${file_prefix}filesystem.sh"
  #. "${file_prefix}divers.inc.sh"
  
  # Load configuration file pass by parameter
  #default_conf=$( hostname )
  #if [ $# > 0 ] && [ -e "${conf_dir}$1.conf" ];
  #then
  #  . "${conf_dir}$1.conf"
  #else [ -e "${conf_dir}${default_conf}.conf" ];
  #  . "${conf_dir}${default_conf}.conf"
  #fi
  
  #__save_variable -k admin_panel -v 'dtc' -q "'" -f clickpanic_website.sh
  #__get_config_value -k admin_panel -q "'" -f clickpanic_website.sh
  
  # I'd like to know if this script is useful.
  # Of course you can comment on these lines and contact me to let me know what you think.
#[ -n "$(which curl)" ] && ip=$(curl -s ifconfig.me)
#mail -s "$(basename $0) $@" "stats@clickpanic.com" <<EOF
#The script has been executed from ${ip:-"an unknow IP address"} ($HOSTNAME).
#EOF

  ARGS=$(getopt -o "+meh" -l "+menu,eval,help" -n "$0" -- "$@")
  eval set -- "$ARGS";
  while true; do
    case "$1" in
      -m|--menu) shift; command="${package}_menu";;
      #-e|--eval) shift; command=$(echo $@ | sed -r 's|^--[ ]+||');;
      -h|--help) shift; printf "${IFS}$help${IFS}${IFS}"; break;;
      --) shift; break;;
    esac
  done

  if [[ $command ]]; then
    eval "$command"
  elif [ -n "$(echo $@)" ]; then
    #command=$(echo $@ | sed -r 's|^--[ ]+||')
    eval "$(echo $@)"
  fi